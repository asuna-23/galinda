@supply_routes.route('/', methods=['POST'])
def create_supply():
    data = request.json
    try:
        # Check if 'assigned_to' field exists in the payload
        assigned_to = data.get('assigned_to')

        if assigned_to:  # Validate assigned_to if it has a value
            employee = Employee.query.get(assigned_to)
            if not employee:
                return jsonify({"error": f"Employee with ID {assigned_to} does not exist"}), 400

        # If assigned_to is empty, set it to None (null)
        if not assigned_to:
            data['assigned_to'] = None

        # Validate and create new supply
        supply = supply_schema.load(data)
        new_supply = Supply(**supply)
        db.session.add(new_supply)
        db.session.commit()
        return supply_schema.jsonify(new_supply), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 400


@supply_routes.route('/<int:supply_id>', methods=['PUT'])
def update_supply(supply_id):
    supply = Supply.query.get(supply_id)
    if not supply:
        return jsonify({"error": "Supply not found"}), 404

    data = request.json
    try:
        # Check if 'assigned_to' field exists in the payload
        assigned_to = data.get('assigned_to')

        if assigned_to:  # Validate assigned_to if it has a value
            employee = Employee.query.get(assigned_to)
            if not employee:
                return jsonify({"error": f"Employee with ID {assigned_to} does not exist"}), 400

        # If assigned_to is empty, set it to None (null)
        if not assigned_to:
            data['assigned_to'] = None

        # Update supply
        updated_data = supply_schema.load(data, partial=True)
        for key, value in updated_data.items():
            setattr(supply, key, value)
        db.session.commit()
        return supply_schema.jsonify(supply), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 400
